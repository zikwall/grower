// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: filebuf.proto

package filebuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileBufferServiceClient is the client API for FileBufferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileBufferServiceClient interface {
	CreateDataStreamer(ctx context.Context, opts ...grpc.CallOption) (FileBufferService_CreateDataStreamerClient, error)
}

type fileBufferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileBufferServiceClient(cc grpc.ClientConnInterface) FileBufferServiceClient {
	return &fileBufferServiceClient{cc}
}

func (c *fileBufferServiceClient) CreateDataStreamer(ctx context.Context, opts ...grpc.CallOption) (FileBufferService_CreateDataStreamerClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileBufferService_ServiceDesc.Streams[0], "/filebuf.FileBufferService/CreateDataStreamer", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileBufferServiceCreateDataStreamerClient{stream}
	return x, nil
}

type FileBufferService_CreateDataStreamerClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type fileBufferServiceCreateDataStreamerClient struct {
	grpc.ClientStream
}

func (x *fileBufferServiceCreateDataStreamerClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileBufferServiceCreateDataStreamerClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileBufferServiceServer is the server API for FileBufferService service.
// All implementations must embed UnimplementedFileBufferServiceServer
// for forward compatibility
type FileBufferServiceServer interface {
	CreateDataStreamer(FileBufferService_CreateDataStreamerServer) error
	mustEmbedUnimplementedFileBufferServiceServer()
}

// UnimplementedFileBufferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileBufferServiceServer struct {
}

func (UnimplementedFileBufferServiceServer) CreateDataStreamer(FileBufferService_CreateDataStreamerServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateDataStreamer not implemented")
}
func (UnimplementedFileBufferServiceServer) mustEmbedUnimplementedFileBufferServiceServer() {}

// UnsafeFileBufferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileBufferServiceServer will
// result in compilation errors.
type UnsafeFileBufferServiceServer interface {
	mustEmbedUnimplementedFileBufferServiceServer()
}

func RegisterFileBufferServiceServer(s grpc.ServiceRegistrar, srv FileBufferServiceServer) {
	s.RegisterService(&FileBufferService_ServiceDesc, srv)
}

func _FileBufferService_CreateDataStreamer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileBufferServiceServer).CreateDataStreamer(&fileBufferServiceCreateDataStreamerServer{stream})
}

type FileBufferService_CreateDataStreamerServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type fileBufferServiceCreateDataStreamerServer struct {
	grpc.ServerStream
}

func (x *fileBufferServiceCreateDataStreamerServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileBufferServiceCreateDataStreamerServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileBufferService_ServiceDesc is the grpc.ServiceDesc for FileBufferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileBufferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filebuf.FileBufferService",
	HandlerType: (*FileBufferServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateDataStreamer",
			Handler:       _FileBufferService_CreateDataStreamer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filebuf.proto",
}
